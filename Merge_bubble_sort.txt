Parallel Merge Sort 

*#include<iostream>
#include<omp.h>
using namespace std;

void merge(int *,int,int,int);

void merge_sort(int *arr, int low, int high)
{
    int mid;
    if(low<high)
    {
        mid=(low+high)/2;
        #pragma omp parallel sections
        {
            #pragma omp section
            {
               merge_sort(arr,low,mid);
            }
            #pragma omp section
            {
               merge_sort(arr,mid+1,high);
            }
        }
        merge(arr,low,high,mid);
    }
}

void merge(int *arr,int low,int high,int mid)
{
    int i,j,k,c[50];
    i=low;
    k=low;
    j=mid+1;
    while(i<=mid && j<=high)
    {
        if(arr[i]<arr[j])
        {
            c[k]=arr[i];
            k++;
            i++;
        }
        else
        {
            c[k]=arr[j];
            k++;
            j++;
        }
    }
    while(i<=mid)
    {
        c[k]=arr[i];
        k++;
        i++;
    }
    while(j<=high)
    {
        c[k]=arr[j];
        k++;
        j++;
    }
    for(i=low;i<k;i++)
    {
        arr[i]=c[i];
    }
}

int main()
{
    omp_set_num_threads(4);
    int myarray[30],num;
    cout<<"\nEnter number of elements to be sorted : ";
    cin>>num;
    cout<<"\nEnter elements : ";
    for(int i=0;i<num;i++)
    {
        cin>>myarray[i];
    }
    merge_sort(myarray,0,num-1);
    cout<<"\nSorted array :"<<" ";
    for(int i=0;i<num;i++)
    {
        cout<<myarray[i]<<" ";
    }
}
*/

/*
#include<iostream>
#include<omp.h>
using namespace std;

void swap(int &a, int &b)
{
  int temp;
  temp=a;
  a=b;
  b=temp;
}

void bubble(int *a, int n)
{
  double start=omp_get_wtime();
  for(int i=0;i<n;i++)
  {
    #pragma omp parallel
    for(int j=i+1;j<n;j++)
    {
      if(a[j]<a[i])
      {
  	    swap(a[j],a[i]);
      }
    }
  }
  double end=omp_get_wtime();
  double time=end-start;
  cout<<"\nTime taken => "<<time<<endl;
}

int main()
{
  omp_set_num_threads(4);
  double start,end;
  int *a,n;
  cout<<"\nEnter total number of elements => ";
  cin>>n;
  a=new int[n];
  cout<<"\nEnter elements => ";
  for(int i=0;i<n;i++)
  {
    cin>>a[i];
  }
  bubble(a,n);
  cout<<"\nSorted Array => ";
  for(int i=0;i<n;i++)
  {
    cout<<a[i]<<" ";
  }
  return 0;
}

Parallel Bubble Sort 
#include<stdio.h>
#include<omp.h>

int main()
{
  omp_set_num_threads(4);
  double arr[10]={1,2,3,4,5,6,7,8,9,10};
  double max_val=0.0;
  double min_val=100.0;
  float avg=0.0,sum=0.0,sum_val=0.0;
  int i;

  #pragma omp parallel for reduction(min:min_val)
  for(i=0;i<10;i++)
  {
     printf("thread id = %d and i = %d \n", omp_get_thread_num(),i);
     if(arr[i] < min_val)
     {
        min_val = arr[i];
     }
  }
  printf("min_val = %f", min_val);
  printf("\n");
  printf("\n");

  #pragma omp parallel for reduction(max:max_val)
  for(i=0;i<10;i++)
  {
      printf("thread id = %d and i = %d \n", omp_get_thread_num(),i);
      if(arr[i] > max_val)
      {
         max_val = arr[i];
      }
  }
  printf("max_val = %f", max_val);
  printf("\n");
  printf("\n");

  #pragma omp parallel for reduction(+:sum_val)
  for(i=0;i<10;i++)
  {
      printf("thread id = %d and i = %d \n", omp_get_thread_num(),i);
      sum_val=sum_val+arr[i];
  }
  printf("sum_val = %f", sum_val);
  printf("\n");
  printf("\n");

  #pragma omp parallel for reduction(+:sum)
  for(i=0;i<10;i++)
  {
       printf("thread id = %d and i = %d \n", omp_get_thread_num(),i);
       sum=sum+arr[i];
  }
  avg=sum/10;
  printf("avg_val = %f", avg);
  printf("\n");
  printf("\n");
}
